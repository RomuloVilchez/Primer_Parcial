# -*- coding: utf-8 -*-
"""primer parcial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HkJvnf-TZKYz2IxDXdnJ3Cy9qdLBN5wc
"""

class Node:
    def __init__(self, data, son=None):
        self.data = data
        self.son = None
        self.father = None
        self.cost = None
        self.set_son(son)

    def set_son(self, son):
        self.son = son
        if self.son is not None:
            for s in self.son:
                s.father = self

    def get_son(self):
        return self.son

    def get_father(self):
        return self.father

    def set_father(self, father):
        self.father = father

    def set_data(self, data):
        self.data = data

    def get_data(self):
        return self.data

    def set_cost(self, cost):
        self.cost = cost

    def get_cost(self):
        return self.cost

    def equal(self, node):
        if self.get_data() == node.get_data():
            return True
        else:
            return False

    def on_list(self, node_list):
        listed = False
        for n in node_list:
            if self.equal(n):
                listed = True
        return listed

    def __str__(self):
        return str(self.get_data())

import sys
import math
sys.setrecursionlimit(9999999)

def search_heuristic_solution(init_node, solution, visited):
    visited.append(init_node.get_data())
    if init_node.get_data() == solution:
        return init_node
    else:
        # Expandir nodos sucesores (hijos)
        node_data = init_node.get_data()
        son_nodes = []
        
        for i in range(0,len(node_data)-1):
            son_data = node_data.copy()
            data = son_data[i]
            son_data[i] = son_data[i+1]
            son_data[i+1] = data
            son_nodes.append( Node( son_data ) )  
        init_node.set_son(son_nodes)




        for son_node in init_node.get_son():

            if not son_node.get_data() in visited and improvement(init_node, son_node):
                solutn = search_heuristic_solution(son_node, solution, visited)
                if solutn is not None:
                    return solutn
        return None

def improvement(father_node, son_node):
    father_quality = 0
    son_quality = 0
    father_data = father_node.get_data()
    son_data = son_node.get_data()

    for n in range(1, len(father_data)):
        if father_data[n][0] >= father_data[n - 1][0]:
            father_quality += 1
        if son_data[n][0] >= son_data[n - 1][0]:
            son_quality += 1

    return son_quality >= father_quality

if __name__ == "__main__":
    initial_state = [
                        [ 2," "],[ 1,"c"],[ 3,"c"],[ 8,"c"],[ 5," "],[ 6,"c"],[ 7," "],
                        [ 4," "],[ 9,"c"],
                        [ 10,"c"],[ 11," "],[ 12,"c"],[ 13,"c"],[ 14,"c"],[ 15," "],[ 16,"c"],
                        [ 17,"c"],[ 18,"c"],[ 19,"c"],[ 20,"c"],[ 21," "],[ 22,"c"],[ 23,"c"],
                    ]

    solution_state = [
                        [ 1,"c"],[ 2," "],[ 3,"c"],[ 4," "],[ 5," "],[ 6,"c"],[ 7," "],
                        [ 8,"c"],[ 9,"c"],
                        [ 10,"c"],[ 11," "],[ 12,"c"],[ 13,"c"],[ 14,"c"],[ 15," "],[ 16,"c"],
                        [ 17,"c"],[ 18,"c"],[ 19,"c"],[ 20,"c"],[ 21," "],[ 22,"c"],[ 23,"c"],
                    ]


    visited_nodes = []
    initial_node = Node(initial_state)
    
    solution_node = search_heuristic_solution(initial_node, solution_state, visited_nodes)

    result = []
    node = solution_node

    while node.get_father() is not None:
        result.append(node.get_data())
        node = node.get_father()
    
    result.append(initial_state)
    result.reverse()

    nodo = 1
    for valor in result:
        print("iteracion: "+str(nodo), end="\n")
        print(valor, end="\n")
        nodo += 1

from google.colab import drive
drive.mount('/content/drive')